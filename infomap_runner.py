"""
Infomap Analysis Runner

This module provides functions to run the Infomap clustering algorithm
on Pajek network files and analyze the results.
"""

import os
import subprocess
import pandas as pd
from pathlib import Path


def run_infomap_analysis(pajek_file, output_dir, num_trials=5, additional_args=None):
    """
    Run Infomap clustering algorithm on a Pajek network file.
    
    Parameters:
    -----------
    pajek_file : str
        Path to the input Pajek (.net) file
    output_dir : str
        Directory where Infomap output files will be saved
    num_trials : int, default=5
        Number of trials for Infomap to run (more trials = better optimization)
    additional_args : list, optional
        Additional command line arguments to pass to Infomap
    
    Returns:
    --------
    dict
        Dictionary with results:
        {
            'success': bool,            # Whether Infomap ran successfully
            'output_dir': str,          # Directory containing results
            'stdout': str,              # Standard output from Infomap
            'stderr': str,              # Standard error from Infomap  
            'return_code': int,         # Process return code
            'output_files': list        # List of generated files
        }
    
    Raises:
    -------
    FileNotFoundError
        If the input Pajek file doesn't exist or Infomap isn't installed
    RuntimeError
        If Infomap fails to run properly
        
    Example:
    --------
    >>> result = run_infomap_analysis(
    ...     pajek_file="output/connectome_graph.net",
    ...     output_dir="output/infomap_results",
    ...     num_trials=10
    ... )
    >>> if result['success']:
    ...     print(f"Analysis complete! Found {len(result['output_files'])} output files")
    """
    # Check if input file exists
    if not os.path.exists(pajek_file):
        raise FileNotFoundError(f"Pajek file not found: {pajek_file}")
    
    # Make sure output directory exists
    os.makedirs(output_dir, exist_ok=True)
    
    # Build command
    cmd = ["infomap", pajek_file, output_dir, "--num-trials", str(num_trials)]
    
    # Add any additional arguments
    if additional_args:
        cmd.extend(additional_args)
    
    try:
        # Run Infomap
        result = subprocess.run(
            cmd, 
            stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE, 
            text=True,
            timeout=300  # 5 minute timeout
        )
        
        # Get list of output files
        output_files = []
        if os.path.exists(output_dir):
            output_files = [f for f in os.listdir(output_dir) if os.path.isfile(os.path.join(output_dir, f))]
        
        success = result.returncode == 0
        
        if not success:
            error_msg = f"Infomap failed (return code {result.returncode})"
            if result.stderr:
                error_msg += f":\n{result.stderr}"
            if not result.stderr and result.stdout:
                error_msg += f":\n{result.stdout}"
            
            # Don't raise exception, return the error info instead
            print(f"Warning: {error_msg}")
        
        return {
            'success': success,
            'output_dir': output_dir,
            'stdout': result.stdout,
            'stderr': result.stderr,
            'return_code': result.returncode,
            'output_files': output_files
        }
        
    except subprocess.TimeoutExpired:
        raise RuntimeError(f"Infomap timed out after 5 minutes")
    except FileNotFoundError:
        raise RuntimeError("Infomap not found. Please install infomap: pip install infomap")
    except Exception as e:
        raise RuntimeError(f"Unexpected error running Infomap: {e}")


def parse_infomap_tree(tree_file):
    """
    Parse Infomap .tree output file to extract module information.
    
    Parameters:
    -----------
    tree_file : str
        Path to the .tree file generated by Infomap
        
    Returns:
    --------
    pandas.DataFrame
        DataFrame with columns: ['module_id', 'node_id', 'node_name', 'flow']
        
    Example:
    --------
    >>> df = parse_infomap_tree("output/infomap_results/network.tree")
    >>> print(f"Found {df['module_id'].nunique()} modules")
    """
    if not os.path.exists(tree_file):
        raise FileNotFoundError(f"Tree file not found: {tree_file}")
    
    modules = []
    
    with open(tree_file, 'r') as f:
        # Skip header lines that start with '#'
        for line in f:
            line = line.strip()
            if line and not line.startswith('#'):
                parts = line.split(' ')
                if len(parts) >= 4:
                    module_path = parts[0]
                    flow = float(parts[1])
                    node_name = parts[2]
                    node_id = parts[3] if len(parts) > 3 else node_name
                    
                    # Extract top-level module ID from path (e.g., "1:2:3" -> "1")
                    module_id = module_path.split(':')[0]
                    
                    modules.append({
                        'module_id': int(module_id),
                        'node_id': node_id,
                        'node_name': node_name,
                        'flow': flow,
                        'full_path': module_path
                    })
    
    return pd.DataFrame(modules)


def get_module_statistics(tree_file):
    """
    Get basic statistics about the modules found by Infomap.
    
    Parameters:
    -----------
    tree_file : str
        Path to the .tree file generated by Infomap
        
    Returns:
    --------
    dict
        Dictionary with module statistics
        
    Example:
    --------
    >>> stats = get_module_statistics("output/infomap_results/network.tree") 
    >>> print(f"Found {stats['num_modules']} modules")
    """
    df = parse_infomap_tree(tree_file)
    
    if len(df) == 0:
        return {'num_modules': 0, 'num_nodes': 0, 'modules': []}
    
    module_stats = df.groupby('module_id').agg({
        'node_id': 'count',
        'flow': 'sum'
    }).reset_index()
    
    module_stats.columns = ['module_id', 'num_nodes', 'total_flow']
    module_stats = module_stats.sort_values('total_flow', ascending=False)
    
    return {
        'num_modules': len(module_stats),
        'num_nodes': len(df),
        'largest_module_size': module_stats['num_nodes'].max(),
        'smallest_module_size': module_stats['num_nodes'].min(),
        'mean_module_size': module_stats['num_nodes'].mean(),
        'modules': module_stats.to_dict('records')
    }


def run_complete_infomap_pipeline(pajek_file, output_dir, num_trials=5, parse_results=True):
    """
    Run complete Infomap analysis pipeline including result parsing.
    
    Parameters:
    -----------
    pajek_file : str
        Path to input Pajek file
    output_dir : str  
        Output directory for results
    num_trials : int, default=5
        Number of Infomap trials
    parse_results : bool, default=True
        Whether to parse and return module statistics
        
    Returns:
    --------
    dict
        Complete results including Infomap output and parsed statistics
        
    Example:
    --------
    >>> results = run_complete_infomap_pipeline(
    ...     "network.net", 
    ...     "results/", 
    ...     num_trials=10
    ... )
    >>> print(f"Found {results['module_stats']['num_modules']} modules")
    """
    # Run Infomap
    infomap_result = run_infomap_analysis(pajek_file, output_dir, num_trials)
    
    result = {
        'infomap_result': infomap_result,
        'module_stats': None,
        'tree_data': None
    }
    
    if infomap_result['success'] and parse_results:
        # Look for .tree file in output
        tree_files = [f for f in infomap_result['output_files'] if f.endswith('.tree')]
        
        if tree_files:
            tree_path = os.path.join(output_dir, tree_files[0])
            try:
                result['module_stats'] = get_module_statistics(tree_path)
                result['tree_data'] = parse_infomap_tree(tree_path)
            except Exception as e:
                print(f"Warning: Could not parse results: {e}")
    
    return result


if __name__ == "__main__":
    # Example usage
    print("Infomap Runner - Example Usage")
    print("=" * 40)
    
    # This would run if you execute the script directly
    pajek_file = "example_output.net"
    output_dir = "infomap_results"
    
    if os.path.exists(pajek_file):
        try:
            results = run_complete_infomap_pipeline(
                pajek_file=pajek_file,
                output_dir=output_dir,
                num_trials=3
            )
            
            if results['infomap_result']['success']:
                print("✅ Infomap analysis completed successfully!")
                if results['module_stats']:
                    stats = results['module_stats']
                    print(f"Found {stats['num_modules']} modules")
                    print(f"Largest module: {stats['largest_module_size']} nodes")
                    print(f"Mean module size: {stats['mean_module_size']:.1f} nodes")
            else:
                print("❌ Infomap analysis failed")
                print(results['infomap_result']['stderr'])
                
        except Exception as e:
            print(f"Error: {e}")
    else:
        print(f"Example Pajek file '{pajek_file}' not found.")
        print("Run pajek_converter.py first to generate a network file.")
